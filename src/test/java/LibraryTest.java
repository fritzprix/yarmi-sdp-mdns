
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import io.reactivex.Observable;
import net.doodream.yarmi.model.RMIServiceInfo;
import net.doodream.yarmi.sdp.ServiceDiscovery;
import net.doodream.yarmi.sdp.ServiceDiscoveryListener;
import net.doodream.yarmi.sdp.ServiceRegistry;
import net.doodream.yarmi.sdp.mdns.MDnsServiceDiscovery;
import net.doodream.yarmi.sdp.mdns.MDnsServiceRegistry;
import net.doodream.yarmi.server.RMIService;

public class LibraryTest {

    private static ServiceDiscovery discovery;
    private static ServiceRegistry registry;
    private static RMIService service;
    private static int serviceId;

    @BeforeClass
    public static void before() throws Exception {

        service = RMIService.create(TestService.class);
        service.listen();

        discovery = MDnsServiceDiscovery.create();

        registry = MDnsServiceRegistry.create();
        serviceId = registry.register(service);
        registry.start();
    }

    @AfterClass
    public static void after() throws IOException {
        registry.unregister(serviceId);
        service.stop();
        registry.stop();
    }

    // @Test
    public void testDiscovery() {
        Observable.<RMIServiceInfo>create(emitter -> {
            try {
                discovery.start(TestService.class, new ServiceDiscoveryListener() {

                    @Override
                    public void onServiceDiscovered(RMIServiceInfo svc) {
                        emitter.onNext(svc);
                    }

                    @Override
                    public void onDiscoveryStarted() {

                    }

                    @Override
                    public void onDiscoveryFinished(int arg0, Throwable arg1) {

                    }
                });
            } catch (IOException e) {
                emitter.onError(e);
            }
        }).timeout(5L, TimeUnit.SECONDS).blockingFirst();
    }
}
